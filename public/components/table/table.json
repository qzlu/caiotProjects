{
  "width": 100,
  "height": 100,
  "func": "__ht__function(g, rect, comp, data, view) {\nvar columns = ht.Default.parse(comp.getValue('columns')),\n\tdataSource = ht.Default.parse(comp.getValue('dataSource')),\n\tthBackground = comp.getColor('thBackground'),\n\ttdBackground = comp.getColor('tdBackground'),\n\tthHeight = comp.getValue('thHeight'),\n\ttdHeight = comp.getValue('tdHeight'),\n\tthColor = comp.getColor('thColor'),\n\ttdColor = comp.getColor('tdColor'),\n\tthFontSize = comp.getValue('thFontSize'),\n\ttdFontSize = comp.getValue('tdFontSize'),\n\tthFontFamily = comp.getValue('thFontFamily'),\n\ttdFontFamily = comp.getValue('tdFontFamily'),\n\tborderWidth = comp.getValue('borderWidth'),\n\tborderColor = comp.getColor('borderColor'),\n\tcolumnLineColor = comp.getColor('columnLineColor'),\n\tcolumnLineWidth = comp.getValue('columnLineWidth'),\n\trowLineColor = comp.getColor('rowLineColor'),\n\trowLineWidth = comp.getValue('rowLineWidth'),\n\tshowHeadRowLine = comp.getValue('showHeadRowLine'),\n\tcellPadding = comp.getValue('cellPadding'),\n\tshowHead = comp.getValue('showHead'),\n\ttranslateY = comp.getValue('translateY') || 0;\n\nvar width = rect.width,\n\theight = rect.height,\n\tx = rect.x,\n\ty = rect.y;\n\nif (!columns || columns.length === 0) {\n\treturn;\n}\n\nvar mathMax = Math.max,\n\tcolumnCount = columns.length,\n\trowCount = dataSource.length;\n\nvar calculateColumnsWidth = function (columns){\n\n\tvar contentWidth = width - borderWidth * 2 - columnLineWidth * (columnCount - 1),\n\t\twidths = [],\n\t\trc = 0, ac = 0,\n\t\tcol, colWidth;\n\tfor (var i = 0, size = columns.length; i < size; i++) {\n\t\tcol = columns[i];\n\t\tcolWidth = col.width || 0.1;\n\t\tif (isNaN(colWidth)) {\n\t\t\tvar values = colWidth.split('\\+'),\n\t\t\t\tvalue = parseFloat(values[0]),\n\t\t\t\tcl = [];\n            if (value > 1) {\n                ac += value;\n                cl.push(value);\n            }\n            else {\n                rc += value;\n                cl.push(value);\n            }\n            value = parseFloat(values[1]);\n            if (value > 1) {\n                ac += value;\n                cl.unshift(value);\n            }\n            else {\n                rc += value;\n                cl.push(value);\n            }\n            widths.push(cl);\n\n\t\t} else {\n\t\t\tcolWidth = parseFloat(colWidth);\n\t\t\tif (colWidth >= 1) {\n\t\t\t\tcolWidth = mathMax(12, colWidth);\n\t\t\t\tac += colWidth;\n\t\t\t}\n\t\t\telse {\n\t\t\t\trc += colWidth;\n\t\t\t}\n\t\t\twidths.push(colWidth);\n\t\t}\n\t}\n\tfor (var i = 0, size = widths.length; i < size; i++) {\n\t\tcolWidth = widths[i];\n\t\tif (colWidth < 1) {\n\t\t\twidths[i] = Math.max(0, (colWidth / (rc)) * (contentWidth - ac));\n\t\t} else if (colWidth instanceof Array) {\n\t\t\twidths[i] = colWidth[0] + Math.max(0, (colWidth[1] / (rc)) * (contentWidth - ac));\n\t\t}\n\t}\n\treturn widths;\n}\n\nvar colWidths = calculateColumnsWidth(columns);\n// draw background\nif (thBackground && showHead) {\n\tg.save();\n\tg.fillStyle = thBackground;\n\tg.fillRect(x, y + borderWidth, width , thHeight);\n\tg.restore();\n}\nif (tdBackground) {\n\tg.save();\n\tg.fillStyle = tdBackground;\n\tg.fillRect(\n\t\tx,\n\t\ty + thHeight * showHead + borderWidth,\n\t\twidth ,\n\t\theight - thHeight * showHead - borderWidth * 2);\n\tg.restore();\n}\n\n// draw column lines\nif (columnLineWidth) {\n\tvar offsetX = borderWidth;\n    g.beginPath();\n    for (var i = 0; i < columnCount - 1 ; i++) {\n    \toffsetX += colWidths[i] + columnLineWidth * 0.5;\n        g.moveTo(offsetX, y);\n        g.lineTo(offsetX, y + height);\n        offsetX += columnLineWidth * 0.5;\n    }\n    g.strokeStyle = columnLineColor;\n    g.lineWidth = columnLineWidth;\n    g.stroke();\n}\n\n// draw row lines\nif (rowLineWidth) {\n\tvar offsetY = borderWidth + thHeight * showHead + translateY;\n    g.beginPath();\n    // draw table head bottom line\n    if (showHeadRowLine && showHead) {\n    \toffsetY += rowLineWidth * 0.5;\n\t    g.moveTo(x, offsetY);\n    \tg.lineTo(x + width, offsetY);\n    \toffsetY += rowLineWidth * 0.5;\n    }\n    for (var i = 0; i < dataSource.length ; i++) {\n    \toffsetY += tdHeight + rowLineWidth * 0.5;\n    \tg.moveTo(x, offsetY);\n\t    g.lineTo(x + width, offsetY);\n\t    offsetY += rowLineWidth * 0.5;\n    }\n    g.strokeStyle = rowLineColor;\n    g.lineWidth = rowLineWidth;\n    g.stroke();\n}\n\n// draw table head\nvar fx = x + borderWidth,\n\tthFont = thFontSize + 'px ' + thFontFamily;\nif (showHead) {\n\tfor (var i = 0; i < columnCount; i++) {\n\t\tvar columnDef = columns[i],\n\t\t\tcolumnWidth = colWidths[i] - 2 * cellPadding,\n\t\t\tcolor = columnDef.headColor || columnDef.color || thColor;\n\t\tfx += cellPadding;\n\t\tg.save();\n\t\tg.beginPath();\n\t\tg.rect(fx, y + borderWidth + translateY, columnWidth, thHeight);\n\t\tg.clip();\n\t\tht.Default.drawText(g, columnDef.displayName, thFont, color, fx, y + borderWidth + translateY, columnWidth, thHeight, columnDef.align || 'left', 'middle');\n\t\tg.restore();\n\t\tfx += columnWidth + columnLineWidth + cellPadding;\n\t}\n}\n\n// draw table body\nif (dataSource && dataSource.length > 0) {\n\n\tvar tdFont = tdFontSize + 'px ' + tdFontFamily;\n\tdataSource.forEach(function(data, dataIndex){\n\t\tvar fy = dataIndex * tdHeight + rowLineWidth * (dataIndex + showHeadRowLine * showHead * 1) + thHeight * showHead + borderWidth + translateY;\n\t\tfx = x + borderWidth;\n\t\tfor (var i = 0; i < columnCount; i++) {\n\t\t\tvar columnWidth = colWidths[i] - 2 * cellPadding,\n\t\t\t\tcolor = columns[i].bodyColor || columns[i].color || tdColor;;\n\t\t\tfx += cellPadding;\n\t\t\tg.save()\n\t\t\tg.beginPath();\n\t\t\tg.rect(fx, fy, columnWidth, tdHeight);\n\t\t\tg.clip();\n\t\t\tif (columns[i].isIcon) {\n\t\t\t\tif (columnWidth > 0) {\n\t\t\t\t\tht.Default.drawStretchImage(g, ht.Default.getImage(data[columns[i].key]),\n\t\t\t\t\t\t'centerUniform', fx, fy + 1, columnWidth, tdHeight - 2, data);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tht.Default.drawText(g, data[columns[i].key], tdFont, color, fx, fy, columnWidth, tdHeight, columns[i].align || 'left', 'middle');\n\t\t\t}\n\t\t\tg.restore();\n\t\t\tfx += columnWidth + columnLineWidth + cellPadding;\n\t\t}\n\t});\n}\n\n// draw border\nif (borderWidth) {\n    ht.Default.drawBorder(g, borderColor, x, y, width, height, borderWidth);\n}\n}",
  "properties": {
    "columns": {
      "valueType": "Object",
      "defaultValue": [],
      "name": "TableColumnDef"
    },
    "dataSource": {
      "valueType": "Object",
      "defaultValue": [],
      "name": "TableDataSource"
    },
    "thBackground": {
      "valueType": "Color",
      "defaultValue": "rgb(212,212,212)",
      "name": "TableHeadBackground"
    },
    "tdBackground": {
      "valueType": "Color",
      "name": "TableBodyBackground"
    },
    "borderWidth": {
      "valueType": "PositiveNumber",
      "defaultValue": 1,
      "name": "TableBorderWidth"
    },
    "borderColor": {
      "valueType": "Color",
      "defaultValue": "rgb(212,212,212)",
      "name": "TableBorderColor"
    },
    "columnLineColor": {
      "valueType": "Color",
      "defaultValue": "rgb(212,212,212)",
      "name": "TableColumnLineColor"
    },
    "columnLineWidth": {
      "valueType": "PositiveNumber",
      "defaultValue": 1,
      "name": "TableColumnLineWidth"
    },
    "rowLineColor": {
      "valueType": "Color",
      "defaultValue": "rgb(212,212,212)",
      "name": "TableRowLineColor"
    },
    "rowLineWidth": {
      "valueType": "PositiveNumber",
      "defaultValue": 1,
      "name": "TableRowLineWidth"
    },
    "thFontSize": {
      "valueType": "PositiveNumber",
      "defaultValue": 14,
      "name": "TableHeadFontSize"
    },
    "tdFontSize": {
      "valueType": "PositiveNumber",
      "defaultValue": 12,
      "name": "TableBodyFontSize"
    },
    "thHeight": {
      "valueType": "PositiveNumber",
      "defaultValue": 24,
      "name": "TableHeadHeight"
    },
    "tdHeight": {
      "valueType": "PositiveNumber",
      "defaultValue": 18,
      "name": "TableBodyHeight"
    },
    "showHeadRowLine": {
      "valueType": "Boolean",
      "defaultValue": false,
      "name": "TableIsShowHeadLine"
    },
    "thColor": {
      "valueType": "Color",
      "defaultValue": "rgb(33,33,33)",
      "name": "TableHeadColor"
    },
    "tdColor": {
      "valueType": "Color",
      "defaultValue": "rgb(33,33,33)",
      "name": "TableBodyColor"
    },
    "cellPadding": {
      "valueType": "PositiveNumber",
      "defaultValue": 0,
      "name": "TableCellPadding"
    },
    "thFontFamily": {
      "valueType": "String",
      "defaultValue": "sans-serif, arial",
      "name": "TableHeadFontFamily"
    },
    "tdFontFamily": {
      "valueType": "String",
      "defaultValue": "sans-serif, arial",
      "name": "TableBodyFontFamily"
    },
    "showHead": {
      "valueType": "Boolean",
      "defaultValue": true,
      "name": "TableShowHead"
    },
    "translateY": {
      "valueType": "Number",
      "defaultValue": 0,
      "name": "TableTranslateY"
    }
  }
}
{
  "width": 100,
  "height": 30,
  "snapshotURL": "",
  "func": "__ht__function(g, rect, comp, data, view) {\n// 获取属性值\r\nvar x = rect.x;\r\nvar y = rect.y;\r\nvar width = rect.width;\r\nvar height = rect.height;\r\nvar barBackgroundColor = comp.getColor('barBackgroundColor');\r\nvar borderColor = comp.getColor('borderColor');\r\nvar barMax = comp.getValue('barMax');\r\nvar barMin = comp.getValue('barMin');\r\nvar barNum = comp.getValue('barNum');\r\nvar barColor = comp.getColor('barColor');\r\nvar text = comp.getValue('text');\r\nvar textColor = comp.getColor('textColor');\r\nvar hasText = comp.getValue('hasText');\r\nvar numColor = comp.getColor('numColor');\r\nvar hasNum = comp.getValue('hasNum');\r\nvar hasMaxMin = comp.getValue('hasMaxMin');\r\nvar maxColor = comp.getColor('maxColor');\r\nvar minColor = comp.getColor('minColor');\r\nvar isNum = comp.getValue('isNum');\r\nvar percentageSymbol = comp.getValue('percentageSymbol');\r\nvar accurate = comp.getValue('accurate');\r\nvar centerTextSwap = comp.getValue('centerTextSwap');\r\nvar endsSwap = comp.getValue('endsSwap');\r\n\r\n// 输入逻辑\r\nif (barNum > barMax) barNum = barMax;\r\nif (barNum < barMin) barNum = barMin;\r\n\r\n// 定义属性值\r\nvar base = width / 100; \r\nvar center = {\r\n    x: x + width / 2,\r\n    y: x + height / 2,\r\n};\r\nvar r = base * 3;\r\nvar leftCireleCenter = {\r\n    x: center.x - base * 46.5,\r\n    y: center.y,\r\n};\r\nvar rightCireleCenter =  {\r\n    x: center.x + base * 46.5,\r\n    y: center.y,\r\n};\r\nvar points = [\r\n    {\r\n        x: leftCireleCenter.x,\r\n        y: leftCireleCenter.y - r,\r\n    },\r\n    {\r\n        x: rightCireleCenter.x,\r\n        y: rightCireleCenter.y - r,\r\n    },\r\n    {\r\n        x: rightCireleCenter.x,\r\n        y: rightCireleCenter.y + r,\r\n    },\r\n    {\r\n        x: leftCireleCenter.x,\r\n        y: leftCireleCenter.y + r, \r\n    }\r\n];\r\nvar borderWidth = base;\r\nvar percentage = (barNum - barMin) / (barMax - barMin);\r\nvar uPercentage = 1 - percentage;\r\nvar barWidth = rightCireleCenter.x - leftCireleCenter.x + r * 2 - borderWidth;\r\nvar numShow = Math.round(percentage * accurate * 1000) / (accurate * 1000);\r\nvar centerY = base * 10;\r\n\r\n// 判断\r\nif (centerTextSwap) centerY = base * -10;\r\nif (accurate < 0) accurate = 0;\r\nif (percentageSymbol) numShow = Math.round(percentage * 100 * accurate * 10) / (accurate * 10) + '%';\r\nif (isNum) numShow = barNum;\r\nif (barMax <= barMin) {\r\n    hasMaxMin = false;\r\n    hasNum = true;\r\n    percentage = 0;\r\n    numShow = '最大最小值设置错误';\r\n}\r\n\r\n// 绘制文字函数\r\nfunction drawText(text, color, x, y, num, proportion, baseline, alige) {\r\n    var textScale = base * proportion;\r\n    var maxWidth = g.measureText(\"字\").width * num;\r\n    var nowWidth = g.measureText(text).width; \r\n    if (nowWidth > maxWidth) textScale = textScale / nowWidth * maxWidth;\r\n    g.save();\r\n    g.beginPath();\r\n    g.scale(textScale, textScale);\r\n    g.fillStyle = color;\r\n    g.textBaseline = 'top';\r\n    g.textAlign = 'center';\r\n    if (baseline) g.textBaseline = baseline;\r\n    if (alige) g.textAlign = alige;\r\n    g.fillText(text, x / textScale, y / textScale);\r\n    g.restore();\r\n}\r\n\r\n// 绘制进度条显示区域\r\ng.save();\r\ng.beginPath();\r\ng.fillStyle = barBackgroundColor,\r\ng.moveTo(points[0].x, points[0].y);\r\ng.lineTo(points[1].x, points[1].y);\r\ng.arc(rightCireleCenter.x, rightCireleCenter.y, r, Math.PI * 1.5, Math.PI * .5);\r\ng.lineTo(points[3].x, points[3].y);\r\ng.arc(leftCireleCenter.x, leftCireleCenter.y, r, Math.PI * .5, Math.PI * 1.5);\r\ng.fill();\r\ng.clip();\r\n// 绘制进度条\r\ng.beginPath();\r\ng.fillStyle = barColor;\r\ng.moveTo(points[0].x + borderWidth / 2 - barWidth * uPercentage, points[0].y + borderWidth / 2);\r\ng.lineTo(points[1].x - borderWidth / 2 - barWidth * uPercentage, points[1].y + borderWidth / 2);\r\ng.arc(rightCireleCenter.x - barWidth * uPercentage, rightCireleCenter.y, r - borderWidth / 2, Math.PI * 1.5, Math.PI * .5);\r\ng.lineTo(points[3].x + borderWidth / 2 - barWidth * uPercentage, points[3].y - borderWidth / 2);\r\ng.arc(leftCireleCenter.x  - barWidth * uPercentage, leftCireleCenter.y, r - borderWidth / 2, Math.PI * .5, Math.PI * 1.5);\r\ng.fill();\r\ng.restore();\r\n\r\n// 绘制边框\r\ng.beginPath();\r\ng.strokeStyle = borderColor;\r\ng.lineWidth = base;\r\ng.moveTo(points[0].x, points[0].y);\r\ng.lineTo(points[1].x, points[1].y);\r\ng.arc(rightCireleCenter.x, rightCireleCenter.y, r, Math.PI * 1.5, Math.PI * .5);\r\ng.lineTo(points[3].x, points[3].y);\r\ng.arc(leftCireleCenter.x, leftCireleCenter.y, r, Math.PI * .5, Math.PI * 1.5);\r\ng.stroke();\r\n\r\n\r\n// 绘制说明文字\r\nif (hasText) drawText(text, textColor, center.x, center.y + centerY, 12, .6, 'middle', 'center');\r\n\r\n// 绘制百分比\r\nif (hasNum) drawText(numShow, numColor, center.x, center.y - centerY, 10, .8, 'middle', 'center');\r\n\r\n// 绘制大小值\r\nif (hasMaxMin) {\r\n    var endsY = base * 6;\r\n    if (endsSwap) endsY = base * -6;\r\n    drawText(barMax, maxColor, rightCireleCenter.x + r, center.y + endsY, 4, .5, 'middle', 'right');\r\n    drawText(barMin, minColor, leftCireleCenter.x - r, center.y + endsY, 4, .5, 'middle', 'left');\r\n}\n}",
  "properties": {
    "barBackgroundColor": {
      "valueType": "Color",
      "defaultValue": "rgb(93,93,93)",
      "name": "进度条背景色"
    },
    "borderColor": {
      "valueType": "Color",
      "defaultValue": "rgb(0,0,0)",
      "name": "边框颜色"
    },
    "barMax": {
      "valueType": "Int",
      "defaultValue": 100,
      "name": "最大值"
    },
    "barMin": {
      "valueType": "Int",
      "defaultValue": 0,
      "name": "最小值"
    },
    "barNum": {
      "valueType": "Int",
      "defaultValue": 20,
      "name": "数值"
    },
    "barColor": {
      "valueType": "Color",
      "defaultValue": "rgb(183,244,255)",
      "name": "进度条颜色"
    },
    "text": {
      "valueType": "String",
      "defaultValue": "LOADING...",
      "name": "文字说明"
    },
    "textColor": {
      "valueType": "Color",
      "defaultValue": "rgb(0,0,0)",
      "name": "文字颜色"
    },
    "hasText": {
      "valueType": "Boolean",
      "defaultValue": true,
      "name": "显示文字说明"
    },
    "numColor": {
      "valueType": "Color",
      "defaultValue": "rgb(0,0,0)",
      "name": "百分比/数值颜色"
    },
    "hasNum": {
      "valueType": "Boolean",
      "defaultValue": true,
      "name": "显示数值/百分比"
    },
    "hasMaxMin": {
      "valueType": "Boolean",
      "defaultValue": true,
      "name": "是否显示最值"
    },
    "maxColor": {
      "valueType": "Color",
      "defaultValue": "rgb(0,0,0)",
      "name": "最大值颜色"
    },
    "minColor": {
      "valueType": "Color",
      "defaultValue": "rgb(0,0,0)",
      "name": "最小值颜色"
    },
    "isNum": {
      "valueType": "Boolean",
      "defaultValue": false,
      "name": "显示的是数值"
    },
    "percentageSymbol": {
      "valueType": "Boolean",
      "defaultValue": true,
      "name": "百分比显示%"
    },
    "accurate": {
      "valueType": "Int",
      "defaultValue": 1,
      "name": "百分比精确到"
    },
    "centerTextSwap": {
      "valueType": "Boolean",
      "defaultValue": false,
      "name": "中间文字交换"
    },
    "endsSwap": {
      "valueType": "Boolean",
      "defaultValue": true,
      "name": "两端文字位置"
    }
  }
}
{
  "width": 100,
  "height": 100,
  "snapshotURL": "",
  "func": "__ht__function(g, rect, comp, data, view) {\nif (!data) return;\nvar content =  comp.getValue('content'),\n    autoScale = comp.getValue('autoScale'),\n    fontSize = comp.getValue('fontSize'),\n    fontFamily = comp.getValue('fontFamily'),\n    wordBreak = comp.getValue('wordBreak'),\n    vAlign = comp.getValue('vAlign'),\n    color = comp.getColor('color'),\n    lineHeight = comp.getValue('lineHeight'),\n    textAlign = comp.getValue('textAlign'),\n    padding = comp.getValue('padding'),\n    background = comp.getColor('background'),\n    fillContent = comp.getValue('fillContent');\n\nif (background) {// 画背景\n    g.save();\n    g.fillStyle = background;\n    g.beginPath();\n    g.rect(rect.x, rect.y, rect.width, rect.height);\n    g.fill();\n    g.restore();\n}\n\nif (!content) return;\n\ng.save();\ng.translate(rect.x, rect.y);\n// padding and font\nvar font = fontSize + 'px ' + fontFamily,\n    paddingTop, paddingRight, paddingBottom, paddingLeft, plist;\n\nif (padding.match(/[^0-9\\s\\.]/g)) {\n    paddingTop = paddingRight = paddingBottom = paddingLeft = 0;\n} else {\n    padding = padding.replace(/\\s\\s+/g, ' ');\n    padding = padding.replace(/^\\s+|\\s+$/g,'');\n    plist = padding.split(' ');\n    plist = plist.length > 0 ? plist : [0];\n\n    switch(plist.length) {\n        case 1:\n            paddingTop = paddingRight = paddingBottom = paddingLeft = parseFloat(plist[0]);\n            break;\n        case 2:\n            paddingTop = paddingBottom = parseFloat(plist[0]);\n            paddingRight = paddingLeft = parseFloat(plist[1]);\n            break;\n        case 3:\n            paddingTop = parseFloat(plist[0]);\n            paddingRight = paddingLeft = parseFloat(plist[1]);\n            paddingBottom = parseFloat(plist[2]);\n            break;\n        default:\n            paddingTop = parseFloat(plist[0]);\n            paddingRight = parseFloat(plist[1]);\n            paddingBottom = parseFloat(plist[2]);\n            paddingLeft = parseFloat(plist[3]);\n            break;\n    }\n}\n\nvar fx = paddingLeft, fy = paddingTop,\n    width = parseInt(rect.width) - paddingLeft - paddingRight,\n    height = parseInt(rect.height) - paddingTop - paddingBottom;\n\nvar getTextSize = function(font, text){\n    var g = document ? ht.Default.createCanvas().getContext(\"2d\") : null;\n    return function(font, text) {\n        g.font = font;\n        return g.measureText(text);\n    };\n}();\n\nvar replacePos = function (str, pos, text) {\n    var str = str.substring(0, pos-1) + text + str.substring(pos - 1,str.length);\n    return str;\n}\n\nvar breakText = function(text, width, font) {\n    var list = [],\n        preCut = 0,\n        i = 1;\n    for (len = text.length; i <= len; i++) {\n        var temp = text.substring(preCut, i),\n            size = getTextSize(font, temp);\n        if (size.width > width) {\n            if (i - 1 === preCut) {\n                list.push(text.substring(preCut, i));\n                preCut = i;\n            }\n            else {\n                list.push(text.substring(preCut, i - 1));\n                preCut = i - 1;\n            }\n        }\n    }\n\n    if (preCut !== i - 1) {\n        list.push(text.substring(preCut, i));\n    }\n    return list;\n};\n\nvar formatText = function(text, style) {\n    var list = [],\n        font = style.font,\n        height = style.height,\n        width = style.width,\n        wordBreak = style.wordBreak,\n        textList = text.split('\\n');\n\n    for (var j = 0, listLen = textList.length; j < listLen; j++) {\n        var subText = textList[j];\n        if (subText === '') {\n            subText = ' ';\n        }\n        if (wordBreak) {\n            Array.prototype.push.apply(list, breakText(subText, width, font));\n        } else {\n            var code = '',\n                array, codeArray, tempStr, size, subList, preSubstr = '';\n            for(var x = 0; x < subText.length; x++){\n                var char = subText.charAt(x);\n                if(char.match(/[a-z|A-Z]/g)) {\n                    code += '1';\n                }else {\n                    code += '2';\n                }\n            }\n\n            code = code.replace(/21/g,'2_1');\n            code = code.replace(/12/g,'1_2');\n\n            for(var i = 0; i < code.length; i++){\n                var char = code.charAt(i);\n                if(char.match(/\\_/g)) {\n                    subText = replacePos(subText, i + 1, '|');\n                }\n            }\n            array = subText.split('|'),\n            codeArray = code.split('_');\n\n            // 判断第一个是否\n            for (var i = 0, len = array.length; i < len; i++) {\n                tempStr = preSubstr + array[i];\n                size = getTextSize(font, tempStr);\n\n                if (codeArray[i][0] === '1') {// 英文单词\n\n                    if (size.width - 2 > width) {// 超出\n                        if (preSubstr) {// 有前串剩余\n                            list.push(preSubstr);\n                            preSubstr = '';\n                            i --;// 清空前串后继续执行一次当前循环\n                        } else {// 当前一行装不下一个单词的情况\n                            subList = breakText(array[i], width, font);\n                            Array.prototype.push.apply(list, subList.slice(0, subList.length - 1));\n                            preSubstr = subList[subList.length - 1];\n                        }\n                    } else if(size.width === width) {\n                        list.push(tempStr);\n                        preSubstr = '';\n                    } else {\n                        preSubstr = tempStr;\n                    }\n                } else {// 普通串\n                    if (size.width > width) {\n                        subList = breakText(tempStr, width, font);\n                        Array.prototype.push.apply(list, subList.slice(0, subList.length - 1));\n                        preSubstr = subList[subList.length - 1];\n                    } else {\n                        preSubstr = tempStr;\n                    }\n                }\n            }\n            if (preSubstr) {// 加入最后空余串\n                list.push(preSubstr);\n            }\n        }\n    }\n    return list;\n};\n\n\nvar tl = formatText(content, {\n    font: font,\n    width: width,\n    height: height,\n    wordBreak: wordBreak\n});\nif (autoScale && tl.length * lineHeight > height) {\n    // find cache\n    var cacheKey = '' + width + '-' +height + font + lineHeight;\n    var cacheMap = data.a('cacheScaleMap');\n    var i = 0,\n        lineOffset = 0,\n        maxTry = 4,\n        scale, rs,\n        tempList, rlh, preRS, scaledWidth, scaledHeight;\n    vAlign = 'top';\n    // use cache\n    if (cacheMap && cacheMap.key === cacheKey && cacheMap.content === content) {\n        scale = cacheMap.scale;\n        rs = 1 / scale;\n        rlh = scale * lineHeight;\n\n        scaledWidth = parseInt(width * rs);\n        scaledHeight = parseInt(height * rs);\n\n        g.scale(scale, scale);\n\n        tl = formatText(content, {\n            font: font,\n            width: scaledWidth,\n            height: height,\n            wordBreak: wordBreak\n        });\n    }\n    else {\n        cacheMap = {\n            key: cacheKey,\n            content: content\n        };\n\n        while (i < maxTry) {// try\n            scale = Math.sqrt(height / ((tl.length + lineOffset) * lineHeight));\n            rs = 1 / scale;\n            rlh = scale * lineHeight;\n\n            scaledWidth = parseInt(width * rs);\n            scaledHeight = parseInt(height * rs);\n\n            if (preRS) {\n                g.scale(preRS, preRS);\n            }\n\n            g.scale(scale, scale);\n\n            tempList = formatText(content, {\n                font: font,\n                width: scaledWidth,\n                height: height,\n                wordBreak: wordBreak\n            });\n            if (tempList.length * rlh > height) {\n                lineOffset += Math.ceil((tempList.length * rlh - height) / rlh + 0.5);\n                preRS = rs;\n            }\n            else if (tempList.length * rlh < height && Math.abs(height - tempList.length * rlh) > rlh * 2) {\n                lineOffset -= Math.floor((height - tempList.length * rlh) / rlh);\n                preRS = rs;\n            }\n            else {\n                tl = tempList;\n                break;\n            }\n            if (++i === maxTry) {\n                tl = tempList;\n            }\n        }\n        cacheMap.scale = scale;\n        data.a('cacheScaleMap', cacheMap);\n    }\n\n    fx = paddingLeft * rs;\n    fy = paddingTop * rs;\n\n    tl.forEach(function(t, i) {\n        ht.Default.drawText(g, t, font, color, fx, fy, scaledWidth, rlh, textAlign, vAlign);\n        fy += lineHeight;\n    });\n}\nelse if (fillContent && (tl.length + 1) * lineHeight < height) {\n    // find cache\n    var cacheKey = '' + width + '-' + height + font + lineHeight;\n    var cacheMap = data.a('cacheScaleMap');\n    var i = 0,\n        lineOffset = 0,\n        maxTry = 4,\n        scale, rs,\n        tempList, rlh, preRS, scaledWidth, scaledHeight;\n    vAlign = 'top';\n    // use cache\n    if (cacheMap && cacheMap.key === cacheKey && cacheMap.content === content) {\n        scale = cacheMap.scale;\n        rs = 1 / scale;\n        rlh = scale * lineHeight;\n\n        scaledWidth = parseInt(width * rs);\n        scaledHeight = parseInt(height * rs);\n\n        g.scale(scale, scale);\n\n        tl = formatText(content, {\n            font: font,\n            width: scaledWidth,\n            height: height,\n            wordBreak: wordBreak\n        });\n    }\n    else {\n        var currScale = Math.sqrt(height / (tl.length * lineHeight));\n        cacheMap = {\n            key: cacheKey,\n            content: content\n        };\n\n        while (i < maxTry) {// try\n            scale = currScale;\n            rs = 1 / scale;\n            rlh = scale * lineHeight;\n\n            scaledWidth = parseInt(width * rs);\n            scaledHeight = parseInt(height * rs);\n\n            if (preRS) {\n                g.scale(preRS, preRS);\n            }\n\n            g.scale(scale, scale);\n\n            tempList = formatText(content, {\n                font: font,\n                width: scaledWidth,\n                height: height,\n                wordBreak: wordBreak\n            });\n            if (tempList.length * rlh > height || (tempList.length * rlh < height && height - tempList.length * rlh > rlh * 0.8)) {\n                preRS = rs;\n                currScale *= Math.sqrt(height / (tempList.length * rlh));\n            }\n            else {\n                tl = tempList;\n                break;\n            }\n            if (++i === maxTry) {\n                tl = tempList;\n            }\n        }\n        cacheMap.scale = scale;\n        data.a('cacheScaleMap', cacheMap);\n    }\n\n    fx = paddingLeft * rs;\n    fy = paddingTop * rs;\n\n    tl.forEach(function(t, i) {\n        ht.Default.drawText(g, t, font, color, fx, fy, scaledWidth, rlh, textAlign, vAlign);\n        fy += lineHeight;\n    });\n}\nelse {\n    // set y by vAlign\n    if (vAlign === 'middle') {\n        fy += (height - tl.length * lineHeight) / 2;\n    } else if (vAlign === 'bottom') {\n        fy += (height - tl.length * lineHeight);\n    }\n\n    tl.forEach(function(t, i) {\n        ht.Default.drawText(g, t, font, color, fx, fy, width, lineHeight, textAlign, vAlign);\n        fy += lineHeight;\n    });\n}\ng.restore();\n}",
  "properties": {
    "content": {
      "valueType": "Multiline",
      "defaultValue": "HT 2D Editor",
      "name": "TBContent"
    },
    "autoScale": {
      "valueType": "Boolean",
      "defaultValue": true,
      "name": "TBAutoScale"
    },
    "wordBreak": {
      "valueType": "Boolean",
      "defaultValue": false,
      "name": "TBWordBreak"
    },
    "fontSize": {
      "valueType": "PositiveNumber",
      "defaultValue": 14,
      "name": "TBFontSize"
    },
    "fontFamily": {
      "valueType": "String",
      "defaultValue": "sans-serif, arial",
      "name": "TBFontFamily"
    },
    "textAlign": {
      "valueType": "Align",
      "defaultValue": "left",
      "name": "TBTextAlign"
    },
    "vAlign": {
      "valueType": "VAlign",
      "defaultValue": "middle",
      "name": "TBVerticalAlign"
    },
    "color": {
      "valueType": "Color",
      "defaultValue": "rgb(0,0,0)",
      "name": "TBColor"
    },
    "lineHeight": {
      "valueType": "PositiveNumber",
      "defaultValue": 18,
      "name": "TBLineHeight"
    },
    "background": {
      "valueType": "Color",
      "defaultValue": null,
      "name": "TBBackground"
    },
    "padding": {
      "valueType": "String",
      "defaultValue": "0",
      "name": "TBPadding",
      "description": "like CSS"
    },
    "fillContent": {
      "valueType": "Boolean",
      "defaultValue": true,
      "name": "占整个矩形"
    }
  }
}